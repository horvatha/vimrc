snippet pdb
	import pdb; pdb.set_trace()

snippet ##
	#!/usr/bin/env python
	# coding: ${1:utf-8}

	"""${2:Docstring of the module `Filename('$1', 'foo')`}
	"""

	${4}

snippet test
	def test():
	    assert 1 == 1.0
	    print("Tests passed.")

	if __name__ == "__main__":
	    test()

snippet unittest
	"""${1:Docstring}"""
	import unittest
	

	class Test${2:Class}(unittest.TestCase):
	    """${3:TestGroup}"""
	
	    def setUp(self):
	        """Setup Tests"""
	        self.known_values = (
	            ("alma", 4),
	            ([1, 2], 2),
	        )
	
	    def test_something(self):
	        "should return proper values"
	        self.assertEqual(1, 1.0)
	        with self.assertRaises(AssertionError):
	            max(1, "a")
	        self.assertTrue(1 == 1.0)
	
	if __name__ == "__main__":
	    unittest.main()

snippet ###
	#!/usr/bin/env python${1:3}
	# coding: ${2:utf-8}

	"""${3:Docstring of the module `Filename('$1', 'foo')`}
	"""

	from __future__ import division
	from __future__ import print_function

	__author__ = '${4:`g:snips_author`}'
	# wh for def cl defs ifmain imp fr _ pdb test unittest + <Tab>
	${5}

snippet for
	for ${1:i} in ${2:range(10)}:
		${3:pass}

snippet cl
	class ${1:ClassName}(${2:object}):
		"""${3:docstring for $1}
		"""
		def __init__(self, ${4:arg}):
			${5:super($1, self).__init__()}
			self.$4 = $4
			${6}

snippet fr
	from ${1:module} import ${2:*}
